version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend stack
          command: |
           if aws cloudformation wait stack-exists --stack-name udapeople-backend-<< parameters.id >>
            then 
             aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
            fi
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend stack and S3 bucket
          command: |
            if aws cloudformation wait stack-exists --stack-name udapeople-cloudfront-production
            then 
              aws cloudformation delete-stack --stack-name udapeople-cloudfront-production
            fi 
            if aws s3api head-bucket --bucket udapeople-<< parameters.id >>
            then
              aws s3 rm s3://udapeople-<< parameters.id >>/ --recursive
            fi
            if aws cloudformation wait stack-exists --stack-name udapeople-frontend-<< parameters.id >>
            then 
              aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
            fi
          environment:
              TERM: xterm-256color
          when: << parameters.when >>  

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl -H "token: << parameters.id >>" --request GET https://kvdb.io/NNui4biz8Xuh42cgFYqD5t/DB_MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
          when: << parameters.when >>
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: .    
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install    
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: .    
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install    
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install    
      - run:
          name: Install junit coverage reporter
          working_directory: ./frontend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./frontend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install    
      - run:
          name: Install junit coverage reporter
          working_directory: ./backend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./backend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./backend/test_results
      - store_artifacts:
          path: ./backend/test_results
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install    
      - run:
          name: Check Frontend against security vulnerabilities
          working_directory: ./frontend
          command: npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install    
      - run:
          name: Check Backend against security vulnerabilities
          working_directory: ./backend
          command: npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Deploy backend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --template-file backend.yml \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
              --region ${AWS_DEFAULT_REGION} \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Save backend URL in kvdb
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --output text)
              echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
              curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${BACKEND_IP} \
               https://kvdb.io/NNui4biz8Xuh42cgFYqD5t/BACKEND_URL
      - run:
          name: Deploy frontend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail  

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1c:6f:48:59:56:22:54:de:98:31:ac:af:9b:22:1e:f6:95:62:4e:b9"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install    
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install         
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm run migrations > migration_status
      - run:
          name: Send migration results to kvdb
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration was successful, will update kvdb..."
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "success" https://kvdb.io/NNui4biz8Xuh42cgFYqD5t/DB_MIGRATION_${CIRCLE_WORKFLOW_ID}
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "failure" https://kvdb.io/NNui4biz8Xuh42cgFYqD5t/DB_MIGRATION_${CIRCLE_WORKFLOW_ID}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID}"
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Rebuild frontend and get backend API Url
          working_directory: ./frontend
          command: |
            export API_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://kvdb.io/NNui4biz8Xuh42cgFYqD5t/BACKEND_URL)
            echo "${API_URL}"
            npm run build
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1c:6f:48:59:56:22:54:de:98:31:ac:af:9b:22:1e:f6:95:62:4e:b9"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            cat inventory
            ansible-playbook -i inventory deploy-server.yaml -vv
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            export BACKEND_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://kvdb.io/NNui4biz8Xuh42cgFYqD5t/BACKEND_URL)
            curl "$BACKEND_URL/api/status"
      - run:
          name: Frontend smoke test.
          working_directory: ./backend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.eu-central-1.amazonaws.com/index.html"
            curl -s ${URL} | grep -q "Welcome"
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Store old WorkflowID in kvdb for cleanup phase
          working_directory: ./.circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)      
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "$WorkflowID" https://kvdb.io/NNui4biz8Xuh42cgFYqD5t/WorkflowID

      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople-cloudfront-production \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  cleanup:
    docker:
     - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://kvdb.io/NNui4biz8Xuh42cgFYqD5t/WorkflowID)
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID}
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            fi
          environment:
            TERM: xterm-256color
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]